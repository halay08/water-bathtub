{"version":3,"sources":["components/BathTub.js","components/Button.js","App.js","reportWebVitals.js","index.js"],"names":["BathTub","props","isAnimating","waterLevel","className","Array","fill","map","val","i","Button","text","rest","timer","App","useState","setWaterLevel","setIsAnimating","clearTimer","clearInterval","useEffect","onClick","level","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAuBeA,EAvBC,SAACC,GACf,IAAQC,EAA4BD,EAA5BC,YAAaC,EAAeF,EAAfE,WACrB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKA,UAAU,OAAf,SAEGC,MAAMF,GAAYG,KAAK,GAAGC,KAAI,SAACC,EAAKC,GAAN,OAAY,qBAAaL,UAAU,2BAAbK,QAEvD,sBAAKL,UAAU,OAAf,UACE,qBAAKA,UAAU,QACf,qBAAKA,UAAU,WAEjB,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,UACf,qBAAKA,UAAU,UACf,qBAAKA,UAAU,UACf,qBAAKA,UAAU,UACdF,GAAe,qBAAKE,UAAU,qB,uCCRxBM,EATA,SAACT,GACd,IAAQU,EAAkBV,EAAlBU,KAASC,EAAjB,YAA0BX,EAA1B,GACA,OACE,gDAAQG,UAAU,UAAaQ,GAA/B,aACGD,MCKHE,EAAQ,KA6DGC,MA3Df,WACE,MAAoCC,mBAAS,GAA7C,mBAAOZ,EAAP,KAAmBa,EAAnB,KACA,EAAsCD,oBAAS,GAA/C,mBAAOb,EAAP,KAAoBe,EAApB,KAEMC,EAAa,WACjBD,GAAe,GACfE,cAAcN,GACdA,EAAQ,MAyCV,OANAO,qBAAU,YACJjB,GAhDY,GAgDiBA,GA/ChB,IAgDfe,MAED,CAACf,IAGF,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,CAASF,YAAaA,EAAaC,WAAYA,IAC/C,gCACE,cAAC,EAAD,CAAQQ,KAAK,cAAcU,QAzBR,WAhCP,IAiCZlB,IAGAU,GACFK,IAGFF,GAAc,SAACM,GAAD,OAAWA,EAAQ,KAEjCT,EAAQU,aAAY,WAClBP,GAAc,SAACM,GAAD,OAAWA,EAAQ,OAChC,SAcC,cAAC,EAAD,CAAQX,KAAK,aAAaU,QA3CR,WAdL,IAeblB,IAGAU,GACFK,IAGFD,GAAe,GACfD,GAAc,SAACM,GAAD,OAAWA,EAAQ,KAEjCT,EAAQU,aAAY,WAClBN,GAAe,GACfD,GAAc,SAACM,GAAD,OAAWA,EAAQ,OAChC,gBCvBQE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e108c79e.chunk.js","sourcesContent":["const BathTub = (props) => {\n  const { isAnimating, waterLevel } = props;\n  return (\n    <div className=\"bath-container\">\n      <div className=\"boat\">\n        {/* If the animation effect when filling water is not necessary, remove `slide-in-up` */}\n        {Array(waterLevel).fill(1).map((val, i) => <div key={i} className=\"water-level slide-in-up\"></div>)}\n      </div>\n      <div className=\"legs\">\n        <div className=\"leg\"></div>\n        <div className=\"leg\"></div>\n      </div>\n      <div className=\"taps\">\n        <div className=\"pipe1\"></div>\n        <div className=\"pipe2\"></div>\n        <div className=\"pipe3\"></div>\n        <div className=\"pipe4\"></div>\n        {isAnimating && <div className=\"tap-water\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default BathTub;\n","const Button = (props) => {\n  const { text, ...rest } = props;\n  return (\n    <button className=\"button\" {...rest}>\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n","import BathTub from './components/BathTub';\nimport './App.scss';\nimport './style/index.scss';\nimport { useEffect, useState } from 'react';\nimport Button from './components/Button';\n\nconst EMPTY_LEVEL = 0;\nconst FILLED_LEVEL = 5;\n\nlet timer = null;\n\nfunction App() {\n  const [waterLevel, setWaterLevel] = useState(0);\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  const clearTimer = () => {\n    setIsAnimating(false);\n    clearInterval(timer);\n    timer = null;\n  };\n\n  const handleFillWater = () => {\n    if (waterLevel === FILLED_LEVEL) {\n      return;\n    }\n    if (timer) {\n      clearTimer();\n    }\n    //Action first\n    setIsAnimating(true);\n    setWaterLevel((level) => level + 1);\n    //Then setInterval\n    timer = setInterval(() => {\n      setIsAnimating(true);\n      setWaterLevel((level) => level + 1);\n    }, 2000);\n  };\n\n  const handleEmptyWater = () => {\n    if (waterLevel === EMPTY_LEVEL) {\n      return;\n    }\n    if (timer) {\n      clearTimer();\n    }\n    //Action first\n    setWaterLevel((level) => level - 1);\n    //Then setInterval\n    timer = setInterval(() => {\n      setWaterLevel((level) => level - 1);\n    }, 2000);\n  };\n\n  useEffect(() => {\n    if (waterLevel <= EMPTY_LEVEL || waterLevel >= FILLED_LEVEL) {\n      clearTimer();\n    }\n  }, [waterLevel]);\n\n  return (\n    <div className=\"App\">\n      <BathTub isAnimating={isAnimating} waterLevel={waterLevel}/>\n      <div>\n        <Button text=\"Empty Water\" onClick={handleEmptyWater} />\n        <Button text=\"Fill Water\" onClick={handleFillWater} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}